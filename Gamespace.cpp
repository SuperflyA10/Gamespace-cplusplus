#include <iostream>
#include <vector>
#include <random>
#include <cmath>
#include <time.h>
#include "Gamespace.h"

namespace Gamespace
{
    int genran(int low, int high)
    {
        return low + (rand() % (high - low));
    }

    std::vector<int> Random_number(int Range_Min, int Range_Max, int size) // Vector return function for generating random numbers and storing them in a vector
    {
        std::vector<int> result;
        // int range = genran(Range_Min, Range_Max);

        for (int i = 0; i < size; i++) // for loop over to generate random numbers and store them in a vector
        {
            result.push_back(genran(Range_Min, Range_Max)); // storing the random numbers in the vector
        }
        return result;
    }

    void Difficulty_level(std::vector<int> &vec, int &rand_scalar) // Function for increasing the difficulty level by multipling with the vector with a randomnumber
    {
        // generate a pseudo random scalar value between 1 and 5
        rand_scalar = genran(1, 5);

        std::cout << "Difficulty random scalar number: " << rand_scalar << std::endl;

        for (int i = 0; i < 5; i++)
        {
            for (int j = 0; j < vec.size(); j++)
            {
                vec[j] *= rand_scalar; // multipling each vector index with a random number
            }

            // Displaying each vector generated by mutltiplying with a random number
            std::cout << "Level " << i + 1 << ": " << std::endl;
            for (int z = 0; z < vec.size(); z++)
            {
                std::cout << vec[z] << " ";
            }
            std::cout << std::endl;
        }
    }

    void Quests(std::vector<int> &vec, int rand_scalar) // Function for generating a product to check if a the user has won
    {

        bool win = false;
        int num;
        int Quest_scalar = genran(1, 5);

        std::cout << "Quest random scalar number: " << Quest_scalar << std::endl;
        rand_scalar *= pow(Quest_scalar, 5); // multiplying the random number with a previously generated random to generate a new product

        for (int y = 1; y < vec.size(); y++) // Checking if the product exists in the vector
        {
            if (rand_scalar == vec[y])
            {
                win = true;
                num = rand_scalar;
            }
        }

        if (win == true) // User wins if the product exists in the Vector
            std::cout << "Congrats, your winning number is " << num << ", You won!" << std::endl;
        else
            std::cout << "You lost, " << rand_scalar << " does not match!" << std::endl;
    }

}